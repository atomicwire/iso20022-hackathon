plugins {
  id 'java'
  id 'com.github.johnrengelman.shadow'
  id 'com.diffplug.spotless'
}

allprojects {
  group = "io.atomicwire.iso20022hackathon"
  version = "0.0.1-SNAPSHOT"
}

def javaMainClass = 'io.atomicwire.iso20022hackathon.AtomicSettlement'

apply from: "${rootDir}/dependencies.gradle"

repositories {
  mavenCentral()
}

configurations {
  flinkShadowJar
  implementation.extendsFrom(flinkShadowJar)
}

dependencies {

  // Flink provided
  implementation "org.apache.flink:flink-streaming-java:${versions.flink}"
  implementation "org.apache.flink:flink-clients:${versions.flink}"
  implementation "org.apache.flink:flink-connector-datagen:${versions.flink}"
  runtimeOnly "org.apache.flink:flink-runtime-web:${versions.flink}"

  // Lombok
  annotationProcessor "org.projectlombok:lombok:${versions.lombok}"
  compileOnly "org.projectlombok:lombok:${versions.lombok}"
  testAnnotationProcessor "org.projectlombok:lombok:${versions.lombok}"
  testCompileOnly "org.projectlombok:lombok:${versions.lombok}"

  // Logging
  implementation "org.slf4j:slf4j-api:${versions.slf4j}"
  runtimeOnly "org.apache.logging.log4j:log4j-api:${versions.log4j}"
  runtimeOnly "org.apache.logging.log4j:log4j-core:${versions.log4j}"
  runtimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:${versions.log4j}"

  // Testing
  testImplementation "org.assertj:assertj-core:${versions.assertj}"
  testImplementation "org.junit.jupiter:junit-jupiter-api:${versions.junit}"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${versions.junit}"

}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(11)
  }
}

shadowJar {
  configurations = [project.configurations.flinkShadowJar]
}

spotless {
  java {
    googleJavaFormat(versions.googleJavaFormat)
    toggleOffOn()

    licenseHeaderFile "${rootProject.projectDir}/doc/license-header.txt"
  }
}

test {
  useJUnitPlatform()
}

jar {
  manifest {
    attributes 'Main-Class': javaMainClass
  }
}

tasks.register('run', JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  mainClass = javaMainClass
  args '--trace', 'true'
}

tasks.register('runUnlimited', JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  mainClass = javaMainClass
  args '--rate', '0', '--parallelism', '0', '--print-throughput', 'true', '--print-latency', 'true'
}

tasks.register('runUnlimited32', JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  mainClass = javaMainClass
  args '--rate', '0', '--parallelism', '12', '--print-throughput', 'true',
    '--print-latency', 'true', '--output-freq', '3'
}

wrapper {
  gradleVersion = versions.gradle
  distributionType = Wrapper.DistributionType.ALL
}
